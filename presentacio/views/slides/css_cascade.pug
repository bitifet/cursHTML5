
.slide(data-name="css_cascade_almclk")
  div
    h2.step.title Cascada

    p.center.step.fade
      img.medium(src="/images/despertador.png")


.slide(data-name="css_cascade")
  div
    h2 Cascada

    div.bigfont
      p.step.
        Les normes que, en cas de conflicte entre dues #[i declaracions],
        determinen quina s'aplica son el que anomenem #[i Cascada].

      p.step I son, en aquest ordre:

      div.center
        ol
          li.step Origen del Full d'Estil
          li.step Especifitat del Selector
          li.step Ordre al Codi Font


.slide(data-name="css_origin")
  div
    h3 Cascada - Origen

    div.center
      div
        table
          tr
            td.code.step
              h5 Origens
              ol.bigfont
                li.step Author (T√∫)
                li.step #[i (User Styles)] (L'usuari)
                li.step User Agent (El Navegador de l'usuari)

              div.frame.white.step
                p.
                  üìå Les declaracions especificades #[b inline] al propi #[i tag]
                  HTML (mitjan√ßant l'atribut #[i class]) s'apliquen dir√®ctament a
                  l'element i t√©nen prefer√®ncia sobre qualsevol altra
                  independentment del seu origen.
                p #[b Exemple:] #[code.code &lt;h1 style="color:red;"&gt;]


            td.code.step
              h4 !important
              p.step.medium.
                El keyword #[code.code !important] al final d'una declaraci√≥
                CSS fa que aquesta prevaleixi fins i tot sobre altres
                d'#[i origen] superior.

              p.step.medium.
                En realitat, podem pensar que els #[i origens] estan duplicats
                de la seg√ºent manera:
              div.center
                ol.step.small
                  li
                    b Author !important
                  li
                    b #[i (User Styles)] !important
                  li
                    b User Agent !important
                  li Author
                  li #[i (User Styles)]
                  li User Agent

        div.center
          p.step.
            #[b MOLT IMPORTANT:] No fer servir (gaireb√©) MAI #[code.code.scratch !important].


.slide(data-name="css_user_agent")
  div
    h3 Cascada - Origen
    h4
      i User Agent

    ul.bigfont
      li.step.
        Els estils del #[i User Agent] son els que t√©nen menys prefer√®ncia de
        tots.
      li.step.
        Per√≤ serveixen per aplicar uns estils m√≠nims.
      li.step.
        Aquests estils per√≤ poden diferir lleugerament d'un #[i User Agent] a
        un altre.
      li.step  ...El que pot acabar afectant a la resta del disseny.
      li.step.
        ...El tamany de lletra, per exemple, pot fer que un t√≠tol passi
        d'ocupar una sola l√≠nia a dues.
      li.step.
        Si ens suposa un problema els haurem d'especificar expl√≠citament per
        assegurar un resultat consistent a tots els navegadors.
      li.step.
        Una soluci√≥ a aquest problema √©s aplicar sempre un full d'estil que
        fixi tots aqueixos estils.
      li.step.
        Per exemple amb #[i normalyze.css]
        (#[a(href="#") https://necolas.github.io/normalize.css/]).


.slide(data-name="css_specificity")
  div
    h2 Cascada - Especificitat

    div.big
      img.step.floatRight(src="/images/despertador.png")

      p.step.
        Donades dues declaracions conflictives i del mateix origen s'aplica
        sempre la m√©s espec√≠fica.

      pre.code.step.
        &lt;style&gt;
            h1 {
              color: blue;
            }
            .title {
              color: green;
            }
        &lt;/style&gt;
        &lt;h1 class="title"&gt;T√≠tol&lt;/h1&gt;
      p.step.
        De quin color pensau que ser√† el text "T√≠tol"?

.slide(data-name="css_specificity_notation")
  div
    h3 Cascada - Especificitat (Notaci√≥)

    table
      tr
        td
          p.step Per decidir quina declaraci√≥ √©s m√©s espec√≠fica:
          p.step.
            #[b Ens fixam en els seus selectors] i els classificam segons els
            seg√ºents criteris...

          div.center
            ul.bigfont
              li.step Nombre d'Identificadors.
              li.step Nombre de Classes.
              li.step Nombre de Tags.

        td.medium
          img.step.floatRight.small(src="/images/despertador.png")
          p.step.
            La declaraci√≥ amb m√©s identificadors #[b al seu selector] guanya.
          p.step.
            En cas d'empat, guanya la que tengui m√©s classes.
          p.step.
            En cas de tornar empatar, guanya la que t√© m√©s nombre de tags.

          div.frame.white.step
            p.
              üìå Les #[i Pseudo-Classes] i els #[i Pseudo-Elements] compten com
              a #[i Classes].

      table
        tr
          td(colspan=3).step.center
            p.
              üìå Per representar aquesta classificaci√≥ fem servir la
              notaci√≥: #[code.code (nI,nC,nT)]
        tr.medium
          td.code.step.
            #[b nI:] Nombre d'identificadors.
          td.code.step.
            #[b nC:] Nombre de classes.
          td.code.step.
            #[b nT:] Nombre de tags.


.slide(data-name="css_specificity_examples")
  div
    h2 Cascada - Especificitat
    h3 Notaci√≥ - Exemples


    table
      tr.step
        th Selector
        th N¬∫ d'IDs
        th N¬∫ de Classes
        th N¬∫ de Tags
        th Notaci√≥
      tr
        td.step.code html body header h1
        td.step.code 0
        td.step.code 0
        td.step.code 4
        td.step.code 0,0,4
      tr
        td.step.code section header.section-header h1
        td.step.code 0
        td.step.code 1
        td.step.code 3
        td.step.code 0,1,3
      tr
        td.step.code .page-header .title
        td.step.code 0
        td.step.code 2
        td.step.code 0
        td.step.code 0,2,0
      tr
        td.step.code #sidebar
        td.step.code 1
        td.step.code 0
        td.step.code 0
        td.step.code 1,0,0


.slide(data-name="css_order")
  div
    h2 Cascada - Ordre

    p.step.
      Quan l'Origen i l'Especificitat coincideixen, la declaraci√≥ que apareixi
      #[b despr√©s] guanya.


    table.step.fade
      tr
        td
          p.step.
            üìå De vegades aix√≤ es fa servir fins i tot dins la mateixa regla.
          div.step #[b Exemple:]
          pre.code.step.
            .menu {
              display: block;
              display: flex;
            }
          ul
            li.step.
              En aquest cas guanya #[i sempre] la segona declaraci√≥.
            li.step.
              ...Per√≤ un navegador que no suporti #[i Flexbox] la ignorar√†.
            li.step.
              Es a dir: la primera ens serveix per definir un valor per
              defecte (#[i fallback]).


.slide(data-name="css_inheritance")
  div
    h2.step.title Her√®ncia

    ul.bigfont
      li.step.
        La #[i Cascada] ens permet decidir quines #[i declaracions] CSS
        s'apliquen a quins elements.

      li.step.
        L'#[i Her√®ncia] fa que aquestes declaracions s'apliquin recursivament
        no nom√©s als elements sel¬∑leccionants, sino tamb√© recursivament a tots
        els que aquests continguin.

      li.step
        p.
          Per√≤ #[b no totes les propietats s'hereten]. Nom√©s aquelles que
          #[i normalment voldriem que s'heretessin]:
        ul
          li.step.
            Les relacionades amb el text (#[i color], #[i font], #[i text-align], ...).
          li.step.
            Algunes relacionades amb les llistes (#[i list-style..], #[i ..-type],
            #[i ..-position], ...).
          li.step.
            Etc√®tera...



//- vim: set ft=jade:
