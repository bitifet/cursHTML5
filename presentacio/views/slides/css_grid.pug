.slide(data-name="grid")
  div.medium
    h3.step.title CSS Grid
    p.step.
      El #[i Grid Layout] va apar√®ixer amb posterioritat a Flexbox.
    p.step.
      Per activar-lo fem servir:
    pre.code.frame.medium.step.
      .contenidor {
          display: grid; /* o inline-grid */
      }
    p.step.
      Podr√≠em dir que #[i Flexbox] ens permet repartir l'espai en una dimensi√≥
      (horitzontal o vertical) mentre que #[i Grid] ens permet fer-ho en dues
      dimensions a l'hora.
    p.step.
      Aix√≠mateix #[b Grid no reempla√ßa Flexbox], sin√≥ que son dos sistemes
      complementaris.
    ul
      li.step.
        #[i Flexbox] √©s m√©s senzill a l'hora de repartir l'espai de forma
        el√†stica entre m√∫ltiples elements.
      li.step.
        Per√≤ per treballar en dues dimensions necessitam anidar m√∫ltiples
        contenidors #[i Flex] un a dins l'altre.

.slide(data-name="grid_layout")
  div.bigfont
    h3 Maquetaci√≥ amb Grid
    p.step.
      Aix√≠, l'HTML de qualsevol #[i Grid] ser√† molt semblant al seg√ºent:
    pre.code.frame.step.
      &lt;div class="grid"&gt;
        &lt;div&gt;...&lt;/div&gt;
        &lt;div&gt;...&lt;/div&gt;
        &lt;div&gt;...&lt;/div&gt;
        ...
      &lt;/div&gt;

.slide(data-name="grid_concepts")
  div
    h3.step.title Conceptes b√†sics
    img.step.floatRight.medium(src="/images/figures/grid/grid-concepts.png")
    p.step.
      Per entendre Grid, necessitam assimilar uns pocs conceptes b√†sics:
    ul.medium
      li.step.
        #[b grid-item:] √âs cadascun dels elements que son fills directes del
        contenidor.
      li.step.
        #[b grid-line:] Son les l√≠nies horitzontals i verticals, tant interiors
        com exteriors, que conformen l'estructura de la graella.
      li.step.
        #[b grid-track:] √âs l'espai entre dues #[i grid-lines] adjacents.
      li.step.
        #[b grid-cell:] √âs l'espai que conformen dues #[i grid-lines]
        horitzontals i dues verticals respectivament adjacents.
      li.step.
        #[b grid-area:] Igual que una #[i grid-cell] per√≤ sense la condici√≥
        d'adjac√®ncia de les #[i grid-lines].

.slide(data-name="grid_properties")
  div.bigfont
    h3 Propietats Principals
    p.step.
      Podriem dir que, conceptualment, el #[i CSS-Grid] √©s m√©s senzill que el
      #[i Flexbox].
    p.step.
      Per√≤ per altra banda √©s molt potent i vers√†til, en el sentit de que ens
      permet obtenir resultats molt diversos i, cadascun d'ells de diverses
      formes (i mitjan√ßant propietats) diferents. 
    p.step.
      Seguidament intentarem explicar un extracte de les t√®cniques i propietats
      m√©s usuals.
    p.step.
      Per a m√©s informaci√≥, a l'apartat de refer√®ncies dels apunts teniu un
      article molt complet del portal web #[i CSS Tricks] al respecte.
    p.step.moreinfo https://css-tricks.com/snippets/css/complete-guide-grid

.slide(data-name="grid_tplcolumns_tplrows")
  div
    h3 grid-template-columns i grid-template-rows
    h4 (Contenidor)
    ul.bigfont
      li.step
        span.
          #[b grid-template-columns:]
        ul
          li.step.
            Declara les columnes en les que els #[i items] s'aniran
            organitzant.
          li.step.
            Si no l'establim obtindr√≠em una graella d'una sola columna.
      li.step
        span.
          #[b grid-template-rows:]
        ul
          li.step.
            Declara les files en les que els #[i items] s'aniran
            organitzant.
          li.step.
            Si no l'especificam es crearan autom√†ticament a mesura que siguin
            necess√†ries.
          li.step.
            Si be, fer servir #[i grid-template-rows] ens permetr√† controlar la
            seva altura.  

.slide(data-name="grid_simple_example")
  div
    h3 CSS Grid - Exemple
    table
      tr
        td.step
          img.medium(src="/images/figures/grid/grid-numbers.png")
          pre.code.frame.white.step.medium.
            .container {
              display: grid;
              grid-template-columns:
                40px 50px auto 50px 40px;
              grid-template-rows: 25% 100px auto;
            }
        td.step
          h4 Markup:
          pre.code.frame.white.
            &lt;div class="grid"&gt;
                &lt;div&gt;Item 1&lt;/div&gt;
                &lt;div&gt;Item 2&lt;/div&gt;
                &lt;div&gt;Item 3&lt;/div&gt;
                &lt;div&gt;Item 4&lt;/div&gt;
                &lt;div&gt;Item 5&lt;/div&gt;
                &lt;div&gt;Item 6&lt;/div&gt;
                &lt;div&gt;Item 7&lt;/div&gt;
                &lt;div&gt;Item 8&lt;/div&gt;
                &lt;div&gt;Item 9&lt;/div&gt;
                &lt;div&gt;Item 10&lt;/div&gt;
                &lt;div&gt;Item 11&lt;/div&gt;
                &lt;div&gt;Item 12&lt;/div&gt;
                &lt;div&gt;...&lt;/div&gt;
            &lt;/div&gt;

.slide(data-name="grid_columns_rows")
  div
    h3 grid-column i grid-row (Items)
    table
      tr
        td.step(rowspan=2)
          p.
            Ens permeten especificar, respectivament, la fila i/o columna a la
            que s'ha d'ubicar un element.
          p.step.
            #[b Exemple:]
          pre.code.frame.white.step.
            .very-first-item {
                grid-column: 1;
                grid-row: 1;
            }
          p.step.
            En realitat, el que especificam √©s
            #[b despr√©s de quin #[i grid-line] volem que s'ubiqui].
        td.step(colspan=2)
          p.
            De fet en realitat accepten 2 nombres de #[i grid-line], separats
            per una barra inclinada (/): #[b El d'inici i el de fi].
      tr
        td.step
          span.
            #[b Exemple:]
          pre.code.frame.white.small.
            .container {
              grid-template-columns: 50px 50px 50px 50px;
              grid-template-rows: auto;
            }
            .header {
              grid-column: 1 / 5;
              grid-row: 1 / 2; /* O simplement '1'  */
            }
            .main {
              grid-column: 1 / 3;
              grid-row: 2 / 3;
            }
            .sidebar {
              grid-column: 4 / 5;
              grid-row: 2 / 3;
            }
            .footer {
              grid-column: 1 / 5;
              grid-row: 3 / 4;
            }
        td.step
          p.small El que ens donaria el seg√ºent resultat:
          img.medium(src="/images/figures/grid/grid-template-areas.png")

.slide(data-name="grid_labels")
  div
    h3 Etiquetes
    p.step.
      #[i grid-template-columns] i #[i grid-template-rows] ens permeten inserir
      etiquetes entre cadascun dels #[i grid-track]s que estem definint.
    img.step.floatRight.medium(src="/images/figures/grid/grid-names.png")
    p.step.
      #[b Exemple:]
    pre.code.frame.step(style="width: 55%").
      .container {
        display: grid;
        grid-template-columns:
          [first] 40px 50px auto 50px 40px [end];
        grid-template-rows:
          [row1-start] 25%
          [row1-end row2-start] 25%
          [row2-end]
        ;
      }
      .header {
        grid-column: first / end;
        grid-row: row1;
      }

.slide(data-name="grid-template-areas")
  div.medium
    h2 grid-template-areas (Contenidor)
    p.step.
      Les etiquetes ens simplifiquen enormement la feina.
    p.step.
      Per√≤, amb #[i layouts] est√†tics, la propietat #[i grid-template-areas]
      ens la simplifica encara m√©s...
    img.step.floatRight.medium(src="/images/figures/grid/grid-template-areas.png")
    div.medium(style="width: 55%;")
      pre.code.step.frame.
        .container {
          grid-template-columns: repeat(4, 50px);
          grid-template-rows: auto;
          grid-template-areas: 
            "header header header header"
            "main   main   .      sidebar"
            "footer footer footer footer";
        }
        .header { grid-area: header; }
        .main { grid-area: main; }
        .sidebar { grid-area: sidebar; }
        .footer { grid-area: footer; }
    table.step.small
      tr
        td
          p.
            üìå La funci√≥ #[i repeat()] ens permet abreviar a l'hora
            d'especificar patrons repetitius de files o columnes.
          p.step.
            Podem repetir patrons molt m√©s complexos. Exemple:
          pre.code.frame.white.step.
            grid-template-columns: repeat(6, 10px 20em 2fr 1fr);
      p

.slide(data-name="grid-gap")
  div
    h2 gap / grid-gap (Contenidor)
    img.step.floatRight.small(src="/images/figures/grid/grid-column-row-gap.png")
    ul
      li.step.
        Fins ara hem vist com repartir l'espai de la graella.
      li.step.
        Per√≤ els elements ens queden #[i aferrats] els uns als altres sense
        gens d'espai enmig.
      li.step.
        Per solucionar aquest problema, tenim la propietat #[i gap] que ens
        permet especificar un marge de separaci√≥ entre els elements.
      li.step.
        La propietat #[i gap] √©s el #[i shorthand] de les propietats
        #[i row-gap] i #[i column-gap], respectivament.
    table.step
      tr
        td
          p.
            üìå Originalment la propietat #[i gap] s'anomenava #[i grid-gap],
            pel que alguns navegadors nom√©s suporten aquesta.
          p.step.
            Per aix√≤ millor especificar les dues:
          pre.code.frame.white.step.
            gap: .5em;
            grid-gap: var(gap);
          p

.slide(data-name="grid-dynamic")
  div
    h2 Graelles Din√†miques
    p.step.
      Suposem que tenim una s√®rie de fotografies i volem muntar una galeria
      fotogr√†fica.
    p.step.
      Tamb√© volem que algunes fotografies, escollides per nosaltres, surtin doble
      tamany i que no ens quedi cap espai buid.
    p.step.
      A m√©s, volem que les fotografies no siguin ni massa grosses ni massa petites i
      que el conjunt s'ajusti a l'amplada disponible.
    div.center
      img.step.medium(src="/images/figures/grid/grid-elastic-sample.png")

.slide(data-name="exercici_6")
  div
    h2 Exercici 6
    table
      tr
        td.step
          p.
            #[b 1.] Obteniu una s√®rie d'imatges i preparau un document html com
            el seg√ºent per a mostrar-les totes. Podeu anomenar els fitxers i
            els peus de foto com m√©s vos agradi:
          pre.code.small.
            &lt;div class="album"&gt;
              &lt;figure class="big"&gt;
                &lt;img src="./view_01.jpeg" alt="Vista 1" /&gt;
                &lt;figcaption&gt;Vista 1&lt;/figcaption&gt;
              &lt;/figure&gt;
              &lt;figure&gt;
                &lt;img src="./view_02.jpeg" alt="Vista 2" /&gt;
                &lt;figcaption&gt;Vista 2&lt;/figcaption&gt;
              &lt;/figure&gt;
              &lt;figure class="big"&gt;
                &lt;img src="./view_03.jpeg" alt="Vista 3" /&gt;
                &lt;figcaption&gt;Vista 3&lt;/figcaption&gt;
              &lt;/figure&gt;
              &lt;figure&gt; ... &lt;/figure&gt;
              ...
            &lt;/div&gt;
          p.step.
            #[b 2.] Aplicau-li el seg√ºent full d'estil i observau que passa:
          pre.code.small.step.
            .album &gt; figure {
              display: inline-block;
              max-width: 300px;
              margin: 0;
            }

        td.step
          pre.code.small.
            .album img {
              max-width: 100%;
              object-fit: cover;
            }
            .album figcaption {
              padding: 0.3em 0.8em;
              background-color: rgba(0, 0, 0, 0.5);
              color: #fff;
              text-align: right;
            }
            @supports (display: grid) {
              .album {
                display: grid;
                grid-template-columns:
                    repeat(auto-fill, minmax(100px, 1fr));
                grid-auto-rows: 1fr;
                grid-gap: 1em;
                grid-auto-flow: dense;
              }
              .album &gt; figure {
                display: flex;
                flex-direction: column;
                max-width: initial;
              }
              .album img {
                flex: 1;
              }
              .album .big {
                grid-row: span 2;
                grid-column: span 2;
              }
            }

        td.step
          p.step.
            #[b 3.] Provau a canviar el tamany de la finestra del navegador
            mentre estau visualitzant la p√†gina. Observau com les imatges
            canvien d'ordre si √©s necessari per tal de no deixar espais en
            blanc.
          p.step.
            #[b 4.] Identificau entre tots quines de les propietats que
            apar√®ixen al css anterior encara no coneixieu.  Investigau a la
            xarxa quina √©s la seva finalitat. Podeu fer-ho en grups i
            repartir-vos les propietats.
          p.step.
            #[b 5.] Experimentau que passa quan en treieu alguna d'elles.


//- vim: set ft=jade:
